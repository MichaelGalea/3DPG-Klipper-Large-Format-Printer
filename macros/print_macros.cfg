[gcode_macro START_PRINT]
variable_extruder_temp: 0
variable_bed_temp: 0
variable_mode:''
gcode:
    # set variables
    {% set bed_temp = params.BED_TEMP|default(60)|float %}
    {% set extruder_temp = params.EXTRUDER_TEMP|default(200)|float %}
    {% set area_start = params.AREA_START|default("0,0") %}
    {% set area_end = params.AREA_END|default("0,0") %}
    {% set mode = params.MODE|default("T0") %}
    

    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=bed_temp VALUE={bed_temp}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=extruder_temp VALUE={extruder_temp}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=mode VALUE='"{mode}"'

    # Start Heating Extruder and Bed (but don't wait for it)
    {% if mode != "T1" %}
        M104 S170 T0
    {% endif %}
    {% if mode != "T0" %}
        M104 S170 T1
    {% endif %}
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bed_temp}
    SET_HEATER_TEMPERATURE HEATER=heater_bed1 TARGET={bed_temp}

    # Home Printer
    BED_MESH_CLEAR
    G28

    # Wait for the bed to reach temperature
    #TEMPERATURE_WAIT SENSOR="heater_generic heater_bed" MINIMUM={bed_temp - 5}
    #TEMPERATURE_WAIT SENSOR="heater_generic heater_bed1" MINIMUM={bed_temp - 5}
    
    # Quad Gantree Leveling 
    QUAD_GANTRY_LEVEL 
    G28 Z

    # Bed mesh for print area
    BED_MESH_CALIBRATE AREA_START={area_start} AREA_END={area_end}

    # select the print toolhead
    {% if mode == "COPY" %}
      ACTIVATE_COPY_MODE
    {% elif mode == "MIRROR" %}
      ACTIVATE_MIRROR_MODE
    {%else%}
      {mode}
    {% endif %}

    
    # preheat the nozzle to print temperature 
    {% if mode != "T1" %}
        M104 S{extruder_temp} T0
    {% endif %}
    {% if mode != "T0" %}
        M104 S{extruder_temp} T1
    {% endif %}
    
    # Move nozzle up to enable nozzle cleaning 
    G90
    G1 Z70 F1000

    # wait for the temperature to be reached
    {% if mode != "T1" %}
        M109 S{extruder_temp} T0
    {% endif %}
    {% if mode != "T0" %}
        M109 S{extruder_temp} T1
    {% endif %}
    
    # Purge filament and wipe nozzle
    PURGE_LINE AREA_START={area_start} AREA_END={area_end}

    # zero the extruder 
    G92 E0

    ENABLE_ALL_SENSOR

[gcode_macro END_PRINT]
gcode:
    # Clear any pauses 
    CLEAR_PAUSE
    
    # Set variables
    {% set min_y = printer.toolhead.axis_minimum.y|float + 0.5 %}
    {% set max_z = printer.toolhead.axis_maximum.z|float - 5.0 %}

    # Move away from print
    G90
    G1 Y{min_y} F15000
    #G1 Y{min_y} Z{max_z} F15000

    # Rest flow and feed overides
    M220 S100
    M221 S100
  
    # Turn off all fans 
    SET_FAN_SPEED FAN=enclosure SPEED=0
    
    # Turn off all heaters
    #TURN_OFF_HEATERS
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
    SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET=0
    
    #Disable all steppers
    #M84 X Y Z E
    #M84 X Y E
    M84

    DISABLE_ALL_SENSOR
    BED_MESH_CLEAR

    
[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
variable_extrude: 2.0
gcode:
  {% if printer['pause_resume'].is_paused|int == 0 %}

    DISABLE_ALL_SENSOR
    
    {% set e = printer["gcode_macro PAUSE"].extrude|float %}
  
    ##### set park positon 
    {% set y_park = printer.toolhead.axis_minimum.y|float + 5 %}
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 5.0) %}
        {% set z_safe = 5.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
  
    # Base Pause
    PAUSE_BASE
  
    # Retract Filament 
    {% if printer[printer.toolhead.extruder].can_extrude|lower == 'true' %}
      G91
      G1 E-{e} F2100
      G92 E0
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
  
    # Move to park
    {% if "xyz" in printer.toolhead.homed_axes %}
      G91
      G1 Z{z_safe} F900
      SAVE_GCODE_STATE NAME=PAUSEPARK2
      G90
      G1 Y{y_park} F15000
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %}
  {% endif %}  

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  {% if printer['pause_resume'].is_paused|int == 1 %}
    
    # Stop the beeping
    BEEP_STOP
    
    # Set variables
    {% set extruder_temp = printer["gcode_macro START_PRINT"].extruder_temp|float %}
    {% set mode = printer["gcode_macro START_PRINT"].mode %}
    {% set e = printer["gcode_macro PAUSE"].extrude|float %}
    
    {% if 'VELOCITY' in params|upper %}
      {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
      {% set get_params = "" %}
    {% endif %}
  
    # wait for the temperature to be reached
    {% if mode != "T1" %}
      M109 S{extruder_temp} T0
    {% endif %}
    {% if mode != "T0" %}
      M109 S{extruder_temp} T1
    {% endif %}
    
    # Purge Some filament
    {% if printer[printer.toolhead.extruder].can_extrude|lower == 'true' %}
      G91
      G1 E{e} F2100
      G92 E0
      G1 E10 F2100
      G92 E0
      G4 1000
      G90
      # Resume print
      RESTORE_GCODE_STATE NAME=PAUSEPARK2 MOVE=1 MOVE_SPEED=1500
      RESUME_BASE {get_params}
      ENABLE_ALL_SENSOR
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
  {% endif %} 

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  # Clear any pauses 
  CLEAR_PAUSE
    
  # Stop the beeping
  BEEP_STOP
  
  {% if "xyz" in printer.toolhead.homed_axes %}
    {% set min_y = printer.toolhead.axis_minimum.y|float + 0.5 %}
    {% set max_z = printer.toolhead.axis_maximum.z|float - 5.0 %}
    G90
    G1 Y{min_y} F15000
    #G1 Y{min_y} Z{max_z} F15000
  {% endif %}

  # Base cancle print
  CANCEL_PRINT_BASE

  # Rest flow and feed overides
  M220 S100
  M221 S100
    
  # Turn off all fans 
  SET_FAN_SPEED FAN=enclosure SPEED=0
  
  # Turn off all heaters
  #TURN_OFF_HEATERS
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
  SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET=0
  
  # Disable all steppers
  #M84 X Y Z E
  #M84 X Y E
  M84

  DISABLE_ALL_SENSOR
  BED_MESH_CLEAR

[gcode_macro M600]
gcode:
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    UNLOAD_FILAMENT
    RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro M84]
rename_existing:M84.1
gcode:
  SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
  SET_STEPPER_ENABLE STEPPER=extruder1 ENABLE=0
  SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0
  SET_STEPPER_ENABLE STEPPER=dual_carriage ENABLE=0
  SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0
  SET_LED LED=HBB_LED RED=0 GREEN=0 BLUE=0 INDEX=4

[gcode_macro ENABLE_ALL_SENSOR]
gcode:
  SET_FILAMENT_SENSOR SENSOR=material_0 ENABLE=1
  SET_FILAMENT_SENSOR SENSOR=motion_sensor_0 ENABLE=1
  SET_FILAMENT_SENSOR SENSOR=material_1 ENABLE=1
  SET_FILAMENT_SENSOR SENSOR=motion_sensor_1 ENABLE=1

[gcode_macro DISABLE_ALL_SENSOR]
gcode:
  SET_FILAMENT_SENSOR SENSOR=material_0 ENABLE=0
  SET_FILAMENT_SENSOR SENSOR=motion_sensor_0 ENABLE=0
  SET_FILAMENT_SENSOR SENSOR=material_1 ENABLE=0
  SET_FILAMENT_SENSOR SENSOR=motion_sensor_1 ENABLE=0

[delayed_gcode _PRINTER_INIT]
initial_duration:0.2
gcode:    
  DISABLE_ALL_SENSOR
  BED_MESH_CLEAR

[gcode_macro M106]
gcode:
  {% if printer['fan_generic extruder_part_fan'] is defined %}
    {% if printer['dual_carriage'].carriage_0 != "INACTIVE" %}
      {% if params.S is defined %}
        SET_FAN_SPEED FAN=extruder_part_fan SPEED={(params.S|float / 255.0)}
      {% else %}
        SET_FAN_SPEED FAN=extruder_part_fan SPEED=1
      {% endif %}
    {% endif %}
  {% endif %}

  {% if printer['fan_generic extruder1_part_fan'] is defined %}
    {% if printer['dual_carriage'].carriage_1 != "INACTIVE" %}
      {% if params.S is defined %}
        SET_FAN_SPEED FAN=extruder1_part_fan SPEED={(params.S|float / 255.0)}
      {% else %}
        SET_FAN_SPEED FAN=extruder1_part_fan SPEED=1
      {% endif %}
    {% endif %}
  {% endif %}
  
